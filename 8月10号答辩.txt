8月10号答辩：

周一：回顾中间件：1、中间件是处于dispatch和reducer之间
		 2、什么是依赖：第二步需要第一步的执行之后才能执行
		 3、中间件结构：export default middle=stroe=>next=>actions{}
		 4、可插拔
      回顾路由：1、基本格式：<Router routes={routes} history={browserHistory} />
		  const routeConfig = { 
  			path: '/',
  			component: AppWrapper,
  			indexRoute: { component: SliderAll},
  			childRoutes: [
    				{ path: 'studentsLib', component: StudentsLib },
    				{ path: 'userCenter/:mid', component: UserCenter },
  			]
		}
		2、<Router history={browserHistory}>
			<Route path='' component={}>
			</Route>
			//或嵌套或平级
		   </Router>
		跳转路由的两种方法：<Link to=''></Link>   history.push('/')
		跳回原组件的方式：window.history.go(-1)  browserHistory.goBack() history.push('')

      回顾数据的扁平化：
	一般从后台请求过来的数据比较杂乱无章，层级比较深，有的可能第一步需要的数据藏在了最后一层，而不需要的
	可能就在第一层。而数据的扁平化就是将深层级的数据变成单层级数据，方便数据的调用与修改。
	一个数组（result）一个实体（entities） ，在container里面进行合并，然后往子组件进行数据传递。
	为了保证数据的可共享与可复用性，必须保证一个实体（entities）
周二：花式回顾数据的扁平化，
周三：重新过一遍数据的扁平化
周四：组件，为什么要用组件：自治，复用，解耦。
	关于自治：要求外部：1、传入显示所需要的数据 2、传入必要的enenthandle  内部：1、state 2、由内向外传数据
				不需要考虑：1、样式 2、renderDom层级
	关于复用：1、重复，多地方用； 场景适配强